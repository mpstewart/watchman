#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use v5.30.0;

use autodie qw( open close );

# set up local libs
use FindBin;
use lib "$FindBin::Bin/../local/lib/perl5";

use AnyEvent::Loop;
use AnyEvent::Filesys::Notify;
use AnyEvent::TermKey;
use AnyEvent;
use Capture::Tiny qw( capture_merged );
use Cwd;
use Term::ANSIColor qw( :constants );

my $CMD = do {
  shift @ARGV if $ARGV[0] eq '--';
  join " ", @ARGV;
};

sub main;
main();
sub main {
  my $cwd = getcwd;

  say "Q to quit. R to run command again.";

	my $file_notifier = AnyEvent::Filesys::Notify->new(
			dirs         => [ $cwd ],
			filter       => qr{\.(?:pm|pl|t)$},
			cb           => \&forky,
			parse_events => 1,  # Improves efficiency on certain platforms
	);

  my $key_notifier = AnyEvent::TermKey->new(
    on_key => \&handle_keypress,
  );

  # let's do this once right off the bat
  run_command();

	AnyEvent::Loop::run();
}

sub forky {
	my $parent = fork();

	if ($parent) {
		wait;
		return;
  }

  else {
    run_command(@_);
  }
}

sub run_command {
  my $event = shift;

  # on the initial run, this function is being invoked directly, so we won't
  # have an event to analyze
  return if $event && !$event->is_created;

  state $par = 0;
  $par++;

  open my $less, '|less -R';

  print_header($less, $par);

  my $merged = capture_merged {
    # script is some magic to make colors work
    system(qq(script --quiet -c "$CMD" /dev/null));
  };

  print $less $merged;
  close $less;
}

sub print_header {
  my ($fh, $par) = @_;

  print $fh GREEN "#" x 50;
  print $fh sprintf("\n".<<TEMPLATE, $CMD, $par);
# cmd: %s
# par: %d
TEMPLATE
  print $fh GREEN "#" x 50;
  print $fh "\n";
}

my $cv = AnyEvent->condvar;
sub handle_keypress {
	my ( $key ) = @_;

	my $letter = $key->termkey->format_key( $key, FORMAT_VIM );

	switch: for ($letter) {
		/q/ && do { exit 0              };
		/r/ && do { run_command()       };
	}

	# respect ctrl-c
	$cv->send if $key->type_is_unicode and
							 $key->utf8 eq "C" and
							 $key->modifiers & KEYMOD_CTRL;
}
