#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use v5.10;

use autodie qw( open close );

# set up local libs
use FindBin;
use lib "$FindBin::Bin/../local/lib/perl5";

use AnyEvent::Filesys::Notify;
use AnyEvent;
use Capture::Tiny qw( capture_merged );
use Cwd;
use Data::Dump qw( ddx );
use Getopt::Long;
use IO::Handle;
use POSIX ":sys_wait_h";
use Scalar::Util qw( openhandle );
use Term::ANSIColor qw( :constants );

my $WATCHED_DIR = cwd;

# initialized in parse_opts
my $CMD;
my %OPTS;

# initialized in get_filter
my $FILETYPE;

sub main {
  parse_opts();
  start_watch();
}

# everything up to the first instance of ' -- ' is processed as args to the
# watchman; everything after that is processed as the user's command
sub parse_opts {
  my $arg_string = join " ", @ARGV;
  $arg_string =~ /^(?<args>.*?) ?-- (?<cmd>.*)$/;
  my $args = $+{args};
  my $cmd  = $+{cmd};

  die_usage() unless $cmd;

  @ARGV = split ' ', $args;
  $CMD  = $cmd;

  GetOptions(\%OPTS,
    'filetype|f=s',
  ); foreach my $ugly (sort keys %OPTS) {
    my $pretty = $ugly;
    next unless $pretty =~ s/-/_/g;
    $OPTS{$pretty} = $OPTS{$ugly};
  }

  ddx \%OPTS if $ENV{DEBUG_OPTS};
}

sub start_watch {
  my $file_notifier = AnyEvent::Filesys::Notify->new(
    dirs         => [ $WATCHED_DIR ],
    filter       => get_filter(),
    cb           => \&handle,
    parse_events => 1,  # Improves efficiency on certain platforms
  );

  handle();

  AnyEvent->condvar->recv;
}

sub get_filter {
  my $filetype = $OPTS{filetype} // 'perl';
  $FILETYPE = $filetype;
  my %filters = (
    perl => [qw( pm pl t )],
    c    => [qw( c       )],
    go   => [qw( go      )],
    json => [qw( json    )],
    js   => [qw( js      )],
    yaml => [qw( yml     )],
    go   => [qw( go      )],
  );

  my $endings = $filters{$filetype};
  die "No support for file type $filetype\n" unless $endings;

  my $ending_tree = join "|", @$endings;

  my $filter = qr{\.(?:$ending_tree)$};
  return $filter;
}

# handle will handle events, but also the lifecycles of our child processes;
# upon receiving a file write event:
# 1) Any existing children will be sent the INT signal, which they may catch and
#    use to clean up any in-progress work they may have going. Handle will wait
#    for any existing children to exit before we spawn new children
# 2) A new child process will be forked, which will run the user's command
sub handle {
  my $event = shift;
  return unless !defined($event) || $event->is_created;

  state $par = 0; $par++;

  # $runner_pid, as a state variable, will cache the PID of any child we create
  # upon event handling; this allows us to send our children the interrupt
  # signal, which will cause them to clean up their own children. This also
  # allows us to perform the necessarily blocking waitpid call
  state $runner_pid;
  if ($runner_pid) {
    kill 'INT', $runner_pid;
    waitpid $runner_pid, 0;
  }

  # fork, and cache the PID so we can clean it up if we catch an event in the
  # meantime
  $runner_pid = fork();

  # if we are the child, then run the user's command
  run_command($par)
    unless $runner_pid;
}


# run_command will run the user's command, catching STDOUT and STDERR, then
# pipe that STDOUT and STDERR to an instance of less. run_command runs entirely
# as a child process, so this function installs an INT handler, which it will
# run in response to our parent catching a new file write event.
sub run_command {
  my $par = shift;

  my $merged = capture_merged {
    # script is some magic to make colors work on some platforms
    system(qq(script --quiet -c "$CMD" /dev/null));
  };

  system('clear');
  my $less_fh;
  my $less_pid = open $less_fh, "|less -KR";
  if ($less_pid) {
    $SIG{INT} = sub {
      kill 'KILL', $less_pid;
      waitpid $less_pid, 0;
      system('clear');
      exit 0;
    };

    print $less_fh header($par);
    print $less_fh $merged;
  }

  else {
    # we're in the child process that's running less; just die if it finishes,
    # our parent will reap us
    exit 0;
  }
}

sub header {
  my ( $par) = @_;

  my $header = sprintf(<<TEMPLATE,
%s%s
* cmd:  %s
* dir:  %s
* type: %s
* par:  %d
%s%s
TEMPLATE
    '*',
    join('',("-") x 60),
    $CMD,
    $WATCHED_DIR,
    $FILETYPE,
    $par,
    '*',
    join('',("-") x 60),
  );

  return $header;
}

sub die_usage {
  my $usage = 'Usage
  watchman [--filetype|-f] -- $user_command
';

  warn $usage;
  exit 1;
}

main();
